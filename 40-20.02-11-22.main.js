/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MetadataApiPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var SplayKebabCasePropertiesOption = /* @__PURE__ */ ((SplayKebabCasePropertiesOption2) => {
  SplayKebabCasePropertiesOption2[SplayKebabCasePropertiesOption2["Disabled"] = 0] = "Disabled";
  SplayKebabCasePropertiesOption2[SplayKebabCasePropertiesOption2["Lowercase"] = 1] = "Lowercase";
  SplayKebabCasePropertiesOption2[SplayKebabCasePropertiesOption2["CamelCase"] = 2] = "CamelCase";
  SplayKebabCasePropertiesOption2[SplayKebabCasePropertiesOption2["LowerAndCamelCase"] = 3] = "LowerAndCamelCase";
  return SplayKebabCasePropertiesOption2;
})(SplayKebabCasePropertiesOption || {});
var DEFAULT_SETTINGS = {
  globalCacheName: "cache",
  globalMetadataApiName: "meta",
  defineObjectPropertyHelperFunctions: true,
  splayKebabCaseProperties: 3 /* LowerAndCamelCase */,
  splayFrontmatterWithoutDataview: true,
  prototypesPath: "_/_assets/_data/_prototypes",
  valuesPath: "_/_assets/_data/_values"
};
var MetadataApiPlugin = class extends import_obsidian.Plugin {
  static get Instance() {
    return MetadataApiPlugin._instance;
  }
  get api() {
    return MetadataApiPlugin._instance;
  }
  async onload() {
    super.onload();
    await this.loadSettings();
    this.addSettingTab(new MetadataApiSettingTab(this.app, this));
    this._initApi();
  }
  onunload() {
    this._deinitApi();
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    this._deinitApi();
    this._initApi();
  }
  _initApi() {
    this._verifyDependencies();
    MetadataApiPlugin._instance = new Metadata(this);
    this._initGlobalMetadata();
    this._initGlobalCache();
    if (this.settings.defineObjectPropertyHelperFunctions) {
      this._initObjectPropertyHelperMethods();
    }
  }
  _verifyDependencies() {
    if (!app.plugins.plugins.dataview || !app.plugins.plugins.metaedit) {
      const error = `Cannot initialize plugin: Metadata-Api. Dependency plugin is missing: ${!app.plugins.plugins.dataview ? "Dataview" : "Metaedit"}. (The metadata-api plugin has been automatically disabled.)`;
      app.plugins.disablePlugin("metadata-api");
      alert(error);
      throw error;
    }
  }
  _initObjectPropertyHelperMethods() {
    Object.defineProperty(Object.prototype, "hasProp", {
      value: function(path, thenDo) {
        if (thenDo) {
          return Metadata.TryToGetDeepProperty(path, thenDo, this);
        } else {
          return Metadata.ContainsDeepProperty(path, this);
        }
      },
      enumerable: false
    });
    Object.defineProperty(Object.prototype, "getProp", {
      value: function(path, defaultValue) {
        const value = Metadata.GetDeepProperty(path, this);
        if (defaultValue !== void 0 && value === void 0) {
          if (typeof defaultValue === "function") {
            return defaultValue();
          } else {
            return defaultValue;
          }
        }
        return value;
      },
      enumerable: false
    });
    Object.defineProperty(Object.prototype, "setProp", {
      value: function(propertyPath, value) {
        return Metadata.SetDeepProperty(propertyPath, value, this);
      },
      enumerable: false
    });
  }
  _initGlobalMetadata() {
    try {
      Object.defineProperty(global, "Metadata", {
        get() {
          return Metadata;
        }
      });
    } catch (e) {
    }
    try {
      Object.defineProperty(window, "Metadata", {
        get() {
          return Metadata;
        }
      });
    } catch (e) {
    }
    try {
      Object.defineProperty(global, this.settings.globalMetadataApiName, {
        get() {
          return Metadata.Api;
        }
      });
    } catch (e) {
    }
    try {
      Object.defineProperty(window, this.settings.globalMetadataApiName, {
        get() {
          return Metadata.Api;
        }
      });
    } catch (e) {
    }
  }
  _initGlobalCache() {
    try {
      Object.defineProperty(global, this.settings.globalCacheName, {
        get() {
          return Metadata.Api.Current.Cache;
        }
      });
    } catch (e) {
    }
    try {
      Object.defineProperty(window, this.settings.globalCacheName, {
        get() {
          return Metadata.Api.Current.Cache;
        }
      });
    } catch (e) {
    }
  }
  _deinitApi() {
    this._deinitGlobalMetadata();
    this._deinitGlobalCache();
    this._deinitObjectPropertyHelpers();
    MetadataApiPlugin._instance = void 0;
  }
  _deinitGlobalCache() {
    try {
      delete global[this.settings.globalCacheName];
    } catch (e) {
    }
    try {
      delete window[this.settings.globalCacheName];
    } catch (e) {
    }
  }
  _deinitGlobalMetadata() {
    try {
      delete global["Metadata"];
    } catch (e) {
    }
    try {
      delete window["Metadata"];
    } catch (e) {
    }
    try {
      delete global[this.settings.globalMetadataApiName];
    } catch (e) {
    }
    try {
      delete window[this.settings.globalMetadataApiName];
    } catch (e) {
    }
  }
  _deinitObjectPropertyHelpers() {
    try {
      delete Object.prototype["hasProp"];
    } catch (e) {
    }
    try {
      delete Object.prototype["getProp"];
    } catch (e) {
    }
    try {
      delete Object.prototype["setProp"];
    } catch (e) {
    }
  }
};
var MetadataApiSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Medatata Api Settings" });
    new import_obsidian.Setting(containerEl).setName("Metadata Api Variable Name").setDesc("The variable name to use for the Metadata Api global scope variable registered by this plugin").addText((text) => text.setPlaceholder("meta").setValue(this.plugin.settings.globalMetadataApiName).onChange(async (value) => {
      this.plugin.settings.globalMetadataApiName = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Global Cache Variable Name").setDesc("The variable name to use for the cache global scope variable registered by this plugin").addText((text) => text.setPlaceholder("cache").setValue(this.plugin.settings.globalCacheName).onChange(async (value) => {
      this.plugin.settings.globalCacheName = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Add Object Property Helper Functions.").setDesc("Adds the function hasProp, getProp, and setProp to all objects for deep property access.").addToggle((toggle) => toggle.setValue(this.plugin.settings.defineObjectPropertyHelperFunctions).onChange(async (value) => {
      this.plugin.settings.defineObjectPropertyHelperFunctions = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Splay Kebab-Case Properties.").setDesc("This option adds copies of any kebab-case properties with the desired naming schemes. This is similar to how a lowercase version of values with uppercase letters are provided in dataview.").addDropdown((toggle) => toggle.setValue(this.plugin.settings.splayKebabCaseProperties.toString()).addOptions(Object.fromEntries(Object.entries(SplayKebabCasePropertiesOption).map(([key, value]) => [key.toString(), value.toString()]))).onChange(async (value) => {
      this.plugin.settings.splayKebabCaseProperties = SplayKebabCasePropertiesOption[parseInt(value)];
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Splay Frontmatter Properties to Lower Case even without Dataview.").setDesc("Dataview splays property keys with uppercase values to lowercase, creating two keys. If this is true, Metadata Api will add this functionality to the base Frontmatter calls, even without Dataview sources included.").addToggle((toggle) => toggle.setValue(this.plugin.settings.splayFrontmatterWithoutDataview).onChange(async (value) => {
      this.plugin.settings.splayFrontmatterWithoutDataview = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Prototypes File Path").setDesc("The path to prototype data storage").addText((text) => text.setPlaceholder("_/_assets/_data/_prototypes").setValue(this.plugin.settings.prototypesPath).onChange(async (value) => {
      this.plugin.settings.prototypesPath = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Data Storage Values Path").setDesc("The path to the value data storage").addText((text) => text.setPlaceholder("_/_assets/_data/_values").setValue(this.plugin.settings.valuesPath).onChange(async (value) => {
      this.plugin.settings.valuesPath = value;
      await this.plugin.saveSettings();
    }));
  }
};
var CurrentMetadata = class {
  constructor(metaApi) {
    this._api = metaApi;
  }
  get Data() {
    return this._api.get();
  }
  get data() {
    return this.Data;
  }
  get Note() {
    const current = app.workspace.getActiveFile();
    if (!current) {
      throw "No Current File";
    }
    return current;
  }
  get note() {
    return this.Note;
  }
  get Path() {
    const note = this.Note;
    let path = note.path;
    if (note.extension) {
      path = path.slice(0, 0 - (note.extension.length + 1));
    }
    return path;
  }
  get path() {
    return this.Path;
  }
  get PathEx() {
    return this.Path + "." + this.note.extension;
  }
  get pathex() {
    return this.PathEx;
  }
  get Matter() {
    return this._api.frontmatter();
  }
  get matter() {
    return this.Matter;
  }
  get Cache() {
    return this._api.cache();
  }
  get cache() {
    return this.Cache;
  }
  patch(frontmatterData, propertyName = null, toValuesFile = false, prototype = false) {
    return this._api.patch(this.path, frontmatterData, propertyName, toValuesFile, prototype);
  }
  set(frontmatterData, toValuesFile = false, prototype = false) {
    return this._api.set(this.path, frontmatterData, toValuesFile, prototype);
  }
  clear(frontmatterProperties = null, toValuesFile = false, prototype = false) {
    return this._api.clear(this.path, frontmatterProperties, toValuesFile, prototype);
  }
};
var _Metadata = class {
  constructor(plugin) {
    this._plugin = plugin;
    this._initializeKebabPropSplayer();
    this._initializePropLowercaseSplayer();
  }
  _initializeKebabPropSplayer() {
    this._kebabPropSplayer = (() => {
      switch (this.plugin.settings.splayKebabCaseProperties) {
        case 1 /* Lowercase */:
          return (base, topLevelPropertiesToIgnore) => _Metadata._recurseOnAllObjectProperties(base, _Metadata._splayKebabToLowercase, topLevelPropertiesToIgnore);
        case 2 /* CamelCase */:
          return (base, topLevelPropertiesToIgnore) => _Metadata._recurseOnAllObjectProperties(base, _Metadata._splayKebabToLowerCamelcase, topLevelPropertiesToIgnore);
        case 3 /* LowerAndCamelCase */:
          return (base, topLevelPropertiesToIgnore) => _Metadata._recurseOnAllObjectProperties(base, _Metadata._splayKebabToLowerAndLowerCamelcase, topLevelPropertiesToIgnore);
        case 0 /* Disabled */:
        default:
          return (base) => base;
      }
    })();
  }
  _initializePropLowercaseSplayer() {
    this._lowerCaseSplayer = this.plugin.settings.splayFrontmatterWithoutDataview ? (base) => _Metadata._recurseOnAllObjectProperties(base, _Metadata._splayToLowerCase) : (base) => base;
  }
  static _recurseOnAllObjectProperties(value, fn, topLevelPropertiesToIgnore = null) {
    if (value && typeof value === "object") {
      if (Array.isArray(value)) {
        return value.map((i) => this._recurseOnAllObjectProperties(i, fn));
      } else {
        const data = {};
        for (const key of Object.keys(value)) {
          if (topLevelPropertiesToIgnore && topLevelPropertiesToIgnore.contains(key)) {
            data[key] = value[key];
          } else {
            fn(key, this._recurseOnAllObjectProperties(value[key], fn), data);
          }
        }
        return data;
      }
    } else {
      return value;
    }
  }
  static _splayKebabToLowercase(key, value, data) {
    if (key.includes("-")) {
      data[key.replace(/-/g, "").toLowerCase()] = value;
    }
    data[key] = value;
  }
  static _splayKebabToLowerCamelcase(key, value, data) {
    if (key.includes("-")) {
      data[key.toLowerCase().split("-").map((part, i) => i !== 0 ? part.charAt(0).toUpperCase() + part.substring(1) : part).join("")] = value;
    }
    data[key] = value;
  }
  static _splayKebabToLowerAndLowerCamelcase(key, value, data) {
    if (key.includes("-")) {
      const lowerKey = key.toLowerCase();
      data[lowerKey.replace(/-/g, "")] = value;
      data[lowerKey.split("-").map((part, i) => i !== 0 ? part.charAt(0).toUpperCase() + part.substring(1) : part).join("")] = value;
    }
    data[key] = value;
  }
  static _splayToLowerCase(key, value, data) {
    data[key] = value;
    data[key.toLowerCase()] = value;
  }
  static get Api() {
    return MetadataApiPlugin.Instance;
  }
  static get DataviewApi() {
    return app.plugins.plugins.dataview.api;
  }
  static get MetaeditApi() {
    return app.plugins.plugins.metaedit.api;
  }
  get Plugin() {
    return this.plugin;
  }
  get plugin() {
    return this._plugin || app.plugins.plugins["metadata-api"];
  }
  static get DefaultSources() {
    return {
      FileInfo: true,
      Frontmatter: true,
      DataviewInline: true,
      Cache: true,
      Headings: true,
      Sections: true
    };
  }
  get Current() {
    return this.current;
  }
  get current() {
    return new CurrentMetadata(this);
  }
  get Data() {
    return this.Current.Data;
  }
  get data() {
    return this.Current.Data;
  }
  getObsidianMetadataFileCache(file = null) {
    const path = (_Metadata.ParseFileName(file) || this.Current.Path) + ".md";
    const fileObject = app.vault.getAbstractFileByPath(path);
    if (!(fileObject instanceof import_obsidian.TFile)) {
      throw `Note Not Found: ${path}`;
    }
    return app.metadataCache.getFileCache(fileObject);
  }
  frontmatter(file = null) {
    const fileCache = this.getObsidianMetadataFileCache(file);
    return fileCache && fileCache.frontmatter ? this._lowerCaseSplayer(this._kebabPropSplayer(fileCache == null ? void 0 : fileCache.frontmatter, null)) : {};
  }
  sections(file = null) {
    const fileCache = this.getObsidianMetadataFileCache(file);
    return fileCache && fileCache.sections ? this._lowerCaseSplayer(this._kebabPropSplayer(fileCache == null ? void 0 : fileCache.sections, null)) : {};
  }
  headings(file = null) {
    const fileCache = this.getObsidianMetadataFileCache(file);
    return fileCache && fileCache.headings ? this._lowerCaseSplayer(this._kebabPropSplayer(fileCache == null ? void 0 : fileCache.headings, null)) : {};
  }
  dv(file = null) {
    return this._kebabPropSplayer(_Metadata.DataviewApi.page(file ? _Metadata.ParseFileName(file) : this.Current.Path), ["file"]);
  }
  cache(file = null) {
    const fileName = _Metadata.ParseFileName(file) || this.Current.Path;
    _Metadata._caches[fileName] = _Metadata._caches[fileName] || {};
    return _Metadata._caches[fileName];
  }
  prototypes(prototypePath) {
    return this.frontmatter(_Metadata.BuildPrototypeFileFullPath(prototypePath));
  }
  values(dataPath) {
    return this.frontmatter(_Metadata.BuildDataFileFullPath(dataPath));
  }
  get(file = null, sources = _Metadata.DefaultSources) {
    const fileName = file ? _Metadata.ParseFileName(file) : this.Current.Path;
    let values = {};
    if (sources === true) {
      values = this._kebabPropSplayer(_Metadata.DataviewApi.page(fileName), ["file"]) || {};
    } else {
      if (sources === false) {
        return {};
      }
      if (sources.DataviewInline || sources.FileInfo) {
        values = this._kebabPropSplayer(_Metadata.DataviewApi.page(fileName), ["file"]) || {};
        if (!sources.FileInfo) {
          delete values.file;
        }
        let frontmatter = null;
        if (!sources.DataviewInline) {
          frontmatter = this.frontmatter(fileName);
          Object.keys(values).forEach((prop) => {
            if (!frontmatter.hasOwnProperty(prop) && prop != "file") {
              delete values[prop];
            }
          });
        }
        if (!sources.Frontmatter) {
          frontmatter = frontmatter || this.frontmatter(fileName);
          Object.keys(frontmatter).forEach((prop) => {
            delete values[prop];
          });
        }
      } else if (sources.Frontmatter) {
        values = this.frontmatter(fileName);
      }
    }
    if (sources === true || sources.Cache) {
      values["cache"] = this.cache(fileName);
    }
    return values;
  }
  patch(file, frontmatterData, propertyName = null, toValuesFile = false, prototype = false) {
    if (prototype && toValuesFile) {
      throw "Cannot patch toValuesFile and prototype at the same time.";
    }
    const { update } = _Metadata.MetaeditApi;
    const fileName = _Metadata._parseFileNameFromDataFileFileOrPrototype(toValuesFile, file, prototype);
    if (propertyName != null) {
      update(propertyName, frontmatterData, fileName);
    } else {
      Object.keys(frontmatterData).forEach((propertyName2) => update(propertyName2, frontmatterData[propertyName2], fileName));
    }
    return this.get(fileName);
  }
  set(file, frontmatterData, toValuesFile = false, prototype = false) {
    if (prototype && toValuesFile) {
      throw "Cannot patch toValuesFile and prototype at the same time.";
    }
    const { update } = _Metadata.MetaeditApi;
    const fileName = _Metadata._parseFileNameFromDataFileFileOrPrototype(toValuesFile, file, prototype);
    this.clear(fileName);
    Object.keys(frontmatterData).forEach((propertyName) => update(propertyName, frontmatterData[propertyName], fileName));
    return this.get(fileName);
  }
  clear(file = null, frontmatterProperties = null, toValuesFile = false, prototype = false) {
    if (prototype && toValuesFile) {
      throw "Cannot patch toValuesFile and prototype at the same time.";
    }
    const fileName = _Metadata._parseFileNameFromDataFileFileOrPrototype(toValuesFile, file, prototype);
    let propsToClear = [];
    if (typeof frontmatterProperties === "string") {
      propsToClear.push(frontmatterProperties);
    } else if (typeof frontmatterProperties === "object") {
      if (frontmatterProperties === null) {
        propsToClear = Object.keys(this.frontmatter(fileName));
      } else if (Array.isArray(frontmatterProperties)) {
        propsToClear = frontmatterProperties;
      } else {
        propsToClear = Object.keys(frontmatterProperties);
      }
    }
    throw "not implemented";
  }
  static ContainsDeepProperty(propertyPath, onObject) {
    const keys = typeof propertyPath == "string" ? propertyPath.split(".") : propertyPath;
    let parent = onObject;
    for (const currentKey of keys) {
      if (typeof parent !== "object") {
        return false;
      }
      if (!parent.hasOwnProperty(currentKey)) {
        return false;
      }
      parent = parent[currentKey];
    }
    return true;
  }
  static TryToGetDeepProperty(propertyPath, thenDo, fromObject) {
    const keys = typeof propertyPath == "string" ? propertyPath.split(".") : propertyPath;
    let parent = fromObject;
    for (const currentKey of keys) {
      if (typeof parent !== "object" || !parent.hasOwnProperty(currentKey)) {
        if (thenDo && thenDo.onFalse) {
          thenDo.onFalse();
        }
        return false;
      }
      parent = parent[currentKey];
    }
    if (thenDo) {
      const then = thenDo.onTrue || thenDo;
      if (then) {
        return then(parent);
      }
    }
    return true;
  }
  static GetDeepProperty(propertyPath, fromObject) {
    return (typeof propertyPath == "string" ? propertyPath.split(".") : propertyPath).reduce((t, p) => t == null ? void 0 : t[p], fromObject);
  }
  static SetDeepProperty(propertyPath, value, onObject) {
    const keys = typeof propertyPath == "string" ? propertyPath.split(".") : propertyPath;
    let parent = onObject;
    let currentKey;
    for (currentKey of keys) {
      if (typeof parent !== "object") {
        throw `Property: ${currentKey}, in Path: ${propertyPath}, is not an object. Child property values cannot be set!`;
      }
      if (!parent.hasOwnProperty(currentKey)) {
        parent[currentKey] = {};
      }
      if (currentKey != keys[keys.length - 1]) {
        parent = parent[currentKey];
      }
    }
    if (!currentKey) {
      throw "No Final Key Provided!?";
    }
    if (typeof value === "function") {
      parent[currentKey] = value(parent[currentKey]);
    } else {
      parent[currentKey] = value;
    }
  }
  path(relativePath = null, extension = "", rootFolder = null) {
    if (!relativePath) {
      return this._addExtension(this.current.path, extension);
    }
    const [fileName, ...folders] = relativePath.split("/").reverse();
    let absolutePath = fileName;
    let currentFolder = rootFolder ? app.vault.getAbstractFileByPath(rootFolder) : this.Current.Note.parent;
    for (var folder of folders.reverse()) {
      if (folder === "..") {
        currentFolder = currentFolder.parent;
      } else if (folder === ".") {
        continue;
      } else {
        absolutePath = folder + "/" + absolutePath;
      }
    }
    if (currentFolder.path !== "/") {
      return this._addExtension(currentFolder.path + "/" + absolutePath, extension);
    } else {
      return this._addExtension(absolutePath, extension);
    }
  }
  _addExtension(path, extension) {
    if (extension) {
      if (typeof extension !== "string") {
        return path + ".md";
      } else {
        return path + "." + extension;
      }
    } else {
      return path;
    }
  }
  static ParseFileName(file) {
    let fileName = file || null;
    if (typeof file === "object" && file !== null) {
      fileName = file.path.split(".").slice(0, -1).join(".");
    }
    return fileName;
  }
  static BuildDataFileFullPath(dataPath) {
    return app.plugins.plugins["metadata-api"].settings.dataFilesPath + dataPath;
  }
  static BuildPrototypeFileFullPath(prototypePath) {
    return app.plugins.plugins["metadata-api"].settings.prototypesPath + prototypePath;
  }
  static _parseFileNameFromDataFileFileOrPrototype(toValuesFile, file, prototype) {
    return toValuesFile ? file ? _Metadata.BuildDataFileFullPath(_Metadata.ParseFileName(file)) : typeof toValuesFile === "string" ? _Metadata.BuildDataFileFullPath(toValuesFile) : _Metadata.BuildDataFileFullPath(_Metadata.Api.Current.Path) : prototype ? file ? _Metadata.BuildPrototypeFileFullPath(_Metadata.ParseFileName(file)) : typeof prototype === "string" ? _Metadata.BuildPrototypeFileFullPath(prototype) : _Metadata.BuildPrototypeFileFullPath(_Metadata.Api.Current.Path) : _Metadata.ParseFileName(file) || _Metadata.Api.Current.Path;
  }
};
var Metadata = _Metadata;
Metadata._caches = {};
//# sourceMappingURL=data:application/json;base64,
