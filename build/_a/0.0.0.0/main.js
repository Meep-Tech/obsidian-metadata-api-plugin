/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MetadataApiPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian4 = require("obsidian");

// src/meta.ts
var import_obsidian2 = require("obsidian");

// src/current.ts
var CurrentMetadata = class {
  constructor(metaApi) {
    this._api = metaApi;
  }
  get Data() {
    return this._api.get();
  }
  get data() {
    return this.Data;
  }
  get Note() {
    const specialCache = this._api.cache("_zpec:a|");
    if (typeof specialCache["CurrentPath"] === "string") {
      const current2 = this._api.vault(ScopedCurrentPath);
      if (!current2) {
        throw "No Current File";
      }
      return current2;
    }
    const current = app.workspace.getActiveFile();
    if (!current) {
      throw "No Current File";
    }
    return current;
  }
  get note() {
    return this.Note;
  }
  get Path() {
    const note = this.Note;
    let path = note.path;
    if (note.extension) {
      path = path.slice(0, 0 - (note.extension.length + 1));
    }
    return path;
  }
  get path() {
    return this.Path;
  }
  get PathEx() {
    return this.note.path;
  }
  get pathex() {
    return this.PathEx;
  }
  get Matter() {
    return this._api.frontmatter();
  }
  get matter() {
    return this.Matter;
  }
  get Cache() {
    return this._api.cache();
  }
  get cache() {
    return this.Cache;
  }
  get Sections() {
    return this._api.sections();
  }
  get sections() {
    return this.Sections;
  }
  patch(frontmatterData, propertyName = null, options = { toValuesFile: false, prototype: false }) {
    return this._api.patch(this.path, frontmatterData, propertyName, options);
  }
  set(frontmatterData, options = { toValuesFile: false, prototype: false }) {
    return this._api.set(this.path, frontmatterData, options);
  }
  clear(frontmatterProperties = null, options = { toValuesFile: false, prototype: false }) {
    return this._api.clear(this.path, frontmatterProperties, options);
  }
};

// src/api.ts
var SplayKebabCasePropertiesOption = /* @__PURE__ */ ((SplayKebabCasePropertiesOption2) => {
  SplayKebabCasePropertiesOption2[SplayKebabCasePropertiesOption2["Disabled"] = 0] = "Disabled";
  SplayKebabCasePropertiesOption2[SplayKebabCasePropertiesOption2["Lowercase"] = 1] = "Lowercase";
  SplayKebabCasePropertiesOption2[SplayKebabCasePropertiesOption2["CamelCase"] = 2] = "CamelCase";
  SplayKebabCasePropertiesOption2[SplayKebabCasePropertiesOption2["LowerAndCamelCase"] = 3] = "LowerAndCamelCase";
  return SplayKebabCasePropertiesOption2;
})(SplayKebabCasePropertiesOption || {});
var PluginContainer = class {
  static get MetaeditApi() {
    return app.plugins.plugins.metaedit.api;
  }
  static get DataviewApi() {
    return app.plugins.plugins.dataview.api;
  }
};

// src/sections.ts
var import_obsidian = require("obsidian");
var SectionHeader = class {
  get text() {
    return this._text;
  }
  get Text() {
    return this._text;
  }
  get index() {
    return this._index;
  }
  get Index() {
    return this._index;
  }
  get Level() {
    return this._level;
  }
  get level() {
    return this._level;
  }
  get md() {
    return this.Md;
  }
  get Md() {
    return `${"#".repeat(this.level)} ${this.text}`;
  }
  constructor(text, level, index) {
    this._text = text;
    this._level = level;
    this._index = index;
  }
};
var NoteSection = class {
  constructor(note, index, heading) {
    this._html = null;
    this._md = null;
    this._keys = [];
    this._count = 0;
    this._parentTitle = null;
    this._sections = {};
    this._subtitles = [];
    this._unique = {};
    this._text = null;
    this._id = null;
    this._root = note;
    this._heading = new SectionHeader(heading.heading, heading.level, index);
    this._keys = NoteSection.SplayKeys(this._heading.text);
  }
  get keys() {
    return this._keys;
  }
  get Keys() {
    return this._keys;
  }
  get count() {
    return this._count;
  }
  get Count() {
    return this._count;
  }
  get Container() {
    return this._parentTitle;
  }
  get container() {
    return this._parentTitle;
  }
  get Sections() {
    return this._sections;
  }
  get sections() {
    return this._sections;
  }
  get Root() {
    return this._root;
  }
  get root() {
    return this._root;
  }
  get subtitles() {
    return this._subtitles;
  }
  get Subtitles() {
    return this._subtitles;
  }
  get Header() {
    return this._heading;
  }
  get header() {
    return this._heading;
  }
  get Md() {
    return this.md;
  }
  get md() {
    return (async () => {
      if (this._md === null) {
        this._md = await this._find();
      }
      return this._md;
    })();
  }
  get Html() {
    return this.html;
  }
  get html() {
    return (async () => {
      if (this._html === null) {
        const md = await this.md;
        this._html = document.createElement("div");
        const renderLeaf = app.workspace.createLeafInTabGroup();
        const view = new import_obsidian.MarkdownView(renderLeaf);
        let localMd = this._md;
        if (this.root.getMatter()) {
          localMd = "---" + this.root.getMatter() + "---\n\n" + localMd;
        }
        view.data = localMd;
        try {
          await import_obsidian.MarkdownRenderer.renderMarkdown(md, this._html, this.root.path, null);
        } finally {
          renderLeaf.detach();
        }
      }
      return this._html;
    })();
  }
  get Txt() {
    return this.txt;
  }
  get txt() {
    return (async () => {
      if (this._text === null) {
        const html = await this.html;
        this._text = html.textContent || "";
      }
      return this._text;
    })();
  }
  get path() {
    return this._root.path + "#" + this.header.text;
  }
  get Path() {
    return this.path;
  }
  get unique() {
    return Object.values(this._unique);
  }
  get Unique() {
    return this.unique;
  }
  get Id() {
    var _a;
    return (_a = this._id) != null ? _a : this._id = this.header.index + ":|:" + this.path + ":|:" + this.header.level;
  }
  get id() {
    return this.Id;
  }
  async _find() {
    const fullNoteContents = await this.root.loadText() || "";
    const headerMd = this.header.Md;
    const headerRegEx = new RegExp(`((?:^${headerMd})|(?:\\n${headerMd}))`, "gm");
    const matches = fullNoteContents.matchAll(headerRegEx);
    if (!matches) {
      throw `Section Header: "${headerMd}", not found in file: ${this.root.path}.`;
    }
    const results = [...matches];
    if (!results || !results.length) {
      throw `Section Header: "${headerMd}", not found in file: ${this.root.path}.`;
    }
    const result = results.at(this.header.index);
    if (!result || !result.index && result.index !== 0) {
      throw `Section Header: "${headerMd}", with index: ${this._index}, not found in file: ${this.root.path}.`;
    }
    const start = fullNoteContents.indexOf("\n", result.index + headerMd.length);
    if (start === -1) {
      return "";
    }
    const match = fullNoteContents.substring(start).match(new RegExp(`(\\n#{1,${this.header.level}})`, "m"));
    if (match && (match.index || match.index === 0)) {
      return fullNoteContents.substring(start + 1, start + match.index);
    }
    return fullNoteContents.substring(start + 1);
  }
  addChild(child) {
    this._subtitles.push(child.header);
    let parent = this;
    while (parent) {
      parent._unique[child.id] = child;
      parent = parent.container;
    }
    for (const key of child.keys) {
      if (!this.hasOwnProperty(key)) {
        this[key] = child;
      }
      if (this._sections[key]) {
        this._sections[key].push(child);
      } else {
        this._sections[key] = [child];
      }
      child._parentTitle = this;
    }
    this._count += 1;
  }
  static SplayKeys(text) {
    const keys = [text];
    let cleaned = text;
    if (cleaned.contains("[")) {
      cleaned = cleaned.replace(new RegExp("\\[\\[(?:(?:([^\\]]*)\\|([^\\]]*))|([^\\]]*))\\]\\]", "g"), "$2$3");
    }
    if (cleaned.contains("::")) {
      cleaned = cleaned.replace(new RegExp("\\[(?:(?:([^\\[:\\|]*)::([^\\]]*)))\\]|\\((?:(?:([^\\[:\\|]*)::([^\\]]*)))\\)", "g"), function(a, b, c, d, e, f) {
        return b ? `${b} ${c}` : e;
      });
    }
    cleaned = cleaned.replace(new RegExp("(?:(^[\\d ][^{a-zA-Z_\\-}]*)|([^{a-zA-Z0-9_\\-\\$ }]))", "g"), "");
    keys.push(cleaned);
    if (PluginContainer.Instance.settings.splayFrontmatterWithoutDataview) {
      const camel = cleaned.replace(/ /g, "");
      if (!camel) {
        return keys.unique();
      }
      const lower = camel.toLowerCase();
      const lowerCamel = camel[0].toLowerCase() + camel.substring(1);
      keys.push(lower, camel, lowerCamel);
      if (PluginContainer.Instance.settings.splayKebabCaseProperties && cleaned.contains("-")) {
        if (PluginContainer.Instance.settings.splayKebabCaseProperties === 3 /* LowerAndCamelCase */) {
          keys.push(lower.replace(/-/g, ""));
          keys.push(lowerCamel.split("-").map((part, i) => i !== 0 && part ? part.charAt(0).toUpperCase() + part.substring(1) : part).join(""));
          keys.push(camel.split("-").map((part) => part ? part.charAt(0).toUpperCase() + part.substring(1) : part).join(""));
        } else if (PluginContainer.Instance.settings.splayKebabCaseProperties === 1 /* Lowercase */) {
          keys.push(lower.replace(/-/g, ""));
        } else if (PluginContainer.Instance.settings.splayKebabCaseProperties === 2 /* CamelCase */) {
          keys.push(lowerCamel.split("-").map((part, i) => i !== 0 && part ? part.charAt(0).toUpperCase() + part.substring(1) : part).join(""));
          keys.push(camel.split("-").map((part) => part ? part.charAt(0).toUpperCase() + part.substring(1) : part).join(""));
        }
      }
    }
    return keys.unique();
  }
};
var NoteSections = class extends Object {
  constructor(notePath, headings) {
    super();
    this._all = {};
    this._root = {};
    this._unique = {};
    this._path = "";
    this._count = 0;
    this._md = null;
    this._fm = "";
    this._html = null;
    if (notePath !== void 0 && headings !== void 0) {
      this._path = notePath;
      let parent = null;
      let previous = null;
      for (const heading of headings) {
        const current = new NoteSection(this, this._all[heading.heading] ? this._all[heading.heading].length : 0, heading);
        if (previous && previous.header.level < current.header.level) {
          parent = previous;
        }
        while (parent && current.header.level <= parent.header.level) {
          parent = parent.Container;
        }
        if (!parent) {
          parent = current;
          if (!this._root[heading.heading]) {
            this._root[heading.heading] = [current];
          } else {
            this._root[heading.heading].push(current);
          }
          for (const key of parent.keys) {
            if (!this.hasOwnProperty(key)) {
              this[key] = parent;
            }
          }
        } else {
          parent == null ? void 0 : parent.addChild(current);
        }
        this._unique[current.id] = current;
        for (const key of current.keys) {
          if (!this._all[key]) {
            this._all[key] = [current];
          } else {
            this._all[key].push(current);
          }
        }
        this._count += 1;
        previous = current;
      }
    }
  }
  get path() {
    return this._path;
  }
  get Path() {
    return this._path;
  }
  get count() {
    return this._count;
  }
  get Count() {
    return this._count;
  }
  get all() {
    return this._all;
  }
  get All() {
    return this._all;
  }
  get Root() {
    return this._root;
  }
  get root() {
    return this._root;
  }
  get headers() {
    return Object.values(this._unique).map((u) => u.header);
  }
  get Headers() {
    return this.headers;
  }
  get unique() {
    return Object.values(this._unique);
  }
  get Unique() {
    return this.unique;
  }
  named(name) {
    return NoteSection.SplayKeys(name).map((k) => this._all[k]).filter((s) => s).flat();
  }
  async loadText() {
    if (this._md !== null) {
      return Promise.resolve(this._md);
    } else {
      const file = PluginContainer.Instance.api.vault(this.path);
      this._md = await app.vault.cachedRead(file);
      const frontMarker = "---";
      if (this._md.startsWith(frontMarker)) {
        var startPosition = this._md.search(frontMarker) + frontMarker.length;
        var endPosition = this._md.slice(startPosition).search(frontMarker) + startPosition;
        this._fm = this._md.slice(startPosition, endPosition);
      }
      return Promise.resolve(this._md);
    }
  }
  async loadHtml() {
    if (this._html !== null) {
      return Promise.resolve(this._html);
    } else {
      return this.loadText().then((v) => {
        this._html = document.createElement("div");
        import_obsidian.MarkdownRenderer.renderMarkdown(this._md, this._html, this.root.path, null);
        return this._html;
      });
    }
  }
  getMatter() {
    return this._fm;
  }
};

// src/meta.ts
var _Metadata = class {
  constructor(plugin) {
    this._plugin = plugin;
    this._initializeKebabPropSplayer();
    this._initializePropLowercaseSplayer();
  }
  _initializeKebabPropSplayer() {
    this._kebabPropSplayer = (() => {
      switch (this.plugin.settings.splayKebabCaseProperties) {
        case 1 /* Lowercase */:
          return (base, topLevelPropertiesToIgnore) => _Metadata._recurseOnAllObjectProperties(base, _Metadata._splayKebabToLowercase, topLevelPropertiesToIgnore);
        case 2 /* CamelCase */:
          return (base, topLevelPropertiesToIgnore) => _Metadata._recurseOnAllObjectProperties(base, _Metadata._splayKebabToLowerCamelcase, topLevelPropertiesToIgnore);
        case 3 /* LowerAndCamelCase */:
          return (base, topLevelPropertiesToIgnore) => _Metadata._recurseOnAllObjectProperties(base, _Metadata._splayKebabToLowerAndLowerCamelcase, topLevelPropertiesToIgnore);
        case 0 /* Disabled */:
        default:
          return (base) => base;
      }
    })();
  }
  _initializePropLowercaseSplayer() {
    this._lowerCaseSplayer = this.plugin.settings.splayFrontmatterWithoutDataview ? (base) => _Metadata._recurseOnAllObjectProperties(base, _Metadata._splayToLowerCase) : (base) => base;
  }
  static _recurseOnAllObjectProperties(value, fn, topLevelPropertiesToIgnore = null) {
    if (value && typeof value === "object") {
      if (Array.isArray(value)) {
        return value.map((i) => this._recurseOnAllObjectProperties(i, fn));
      } else {
        const data = {};
        for (const key of Object.keys(value)) {
          if (topLevelPropertiesToIgnore && topLevelPropertiesToIgnore.contains(key)) {
            data[key] = value[key];
          } else {
            fn(key, this._recurseOnAllObjectProperties(value[key], fn), data);
          }
        }
        return data;
      }
    } else {
      return value;
    }
  }
  static _splayKebabToLowercase(key, value, data) {
    if (key.includes("-")) {
      data[key.replace(/-/g, "").toLowerCase()] = value;
    }
    data[key] = value;
  }
  static _splayKebabToLowerCamelcase(key, value, data) {
    if (key.includes("-")) {
      data[key.toLowerCase().split("-").map((part, i) => i !== 0 && part ? part.charAt(0).toUpperCase() + part.substring(1) : part).join("")] = value;
    }
    data[key] = value;
  }
  static _splayKebabToLowerAndLowerCamelcase(key, value, data) {
    if (key.includes("-")) {
      const lowerKey = key.toLowerCase();
      data[lowerKey.replace(/-/g, "")] = value;
      data[lowerKey.split("-").map((part, i) => i !== 0 && part ? part.charAt(0).toUpperCase() + part.substring(1) : part).join("")] = value;
    }
    data[key] = value;
  }
  static _splayToLowerCase(key, value, data) {
    data[key] = value;
    data[key.toLowerCase()] = value;
  }
  static get Api() {
    return PluginContainer.Instance.api;
  }
  static get DataviewApi() {
    return app.plugins.plugins.dataview.api;
  }
  static get MetaeditApi() {
    return app.plugins.plugins.metaedit.api;
  }
  static get DefaultSources() {
    return {
      FileInfo: true,
      Frontmatter: true,
      DataviewInline: true,
      Cache: true,
      Sections: true
    };
  }
  get Plugin() {
    var _a;
    return (_a = this._plugin) != null ? _a : this._plugin = app.plugins.plugins["metadata-api"];
  }
  get plugin() {
    var _a;
    return (_a = this._plugin) != null ? _a : this._plugin = app.plugins.plugins["metadata-api"];
  }
  get Current() {
    return this.current;
  }
  get current() {
    return new CurrentMetadata(this);
  }
  get Data() {
    return this.Current.Data;
  }
  get data() {
    return this.Current.Data;
  }
  vault(file = null) {
    var _a;
    if (file instanceof import_obsidian2.TAbstractFile) {
      return file;
    }
    const path = _Metadata.ParseFilePathFromSource(file) || this.Current.Path;
    return (_a = app.vault.getAbstractFileByPath(path)) != null ? _a : app.vault.getAbstractFileByPath(path + ".md");
  }
  omfc(file = null) {
    const fileObject = this.vault(file);
    if (!(fileObject instanceof import_obsidian2.TFile)) {
      if (fileObject instanceof import_obsidian2.TFolder) {
        return fileObject.children.map((sub) => this.omfc(sub)).flat();
      } else {
        throw `Note or Folder Not Found: ${fileObject == null ? void 0 : fileObject.path}`;
      }
    }
    const result = app.metadataCache.getFileCache(fileObject) || null;
    if (result !== null) {
      result.path = fileObject.path;
    }
    return result;
  }
  frontmatter(file = null) {
    const fileCache = this.omfc(file);
    if (Array.isArray(fileCache)) {
      return fileCache.map((f) => this.frontmatter(f.path));
    } else {
      return fileCache && fileCache.frontmatter ? this._lowerCaseSplayer(this._kebabPropSplayer(fileCache == null ? void 0 : fileCache.frontmatter, null)) : null;
    }
  }
  sections(file = null) {
    const fileCache = this.omfc(file);
    if (Array.isArray(fileCache)) {
      return fileCache.map((f) => this.sections(f.path));
    } else if (!fileCache) {
      return null;
    } else {
      return new NoteSections(fileCache == null ? void 0 : fileCache.path, fileCache == null ? void 0 : fileCache.headings);
    }
  }
  dv(file = null) {
    const paths = _Metadata.DataviewApi.pagePaths(file ? _Metadata.ParseFilePathFromSource(file) : this.Current.Path);
    if (paths.length > 1) {
      return paths.map((p) => this.dv(p));
    } else if (!paths.length) {
      return null;
    } else {
      const result = _Metadata.DataviewApi.page(paths[0]);
      return this._kebabPropSplayer(result, ["file"]);
    }
  }
  cache(file = null) {
    const fileObject = this.vault(file);
    if (fileObject === null) {
      const key = _Metadata.ParseFilePathFromSource(file);
      if (key !== null && key !== void 0) {
        _Metadata._caches[key] = _Metadata._caches[key] || {};
        return _Metadata._caches[key];
      }
      throw "Invalid Key for File";
    } else if (fileObject instanceof import_obsidian2.TFolder) {
      return fileObject.children.map((f) => this.cache(f)).flat();
    } else {
      _Metadata._caches[fileObject.path] = _Metadata._caches[fileObject.path] || {};
      return _Metadata._caches[fileObject.path];
    }
  }
  prototypes(prototypePath) {
    return this.frontmatter(_Metadata.BuildPrototypeFileFullPath(prototypePath));
  }
  values(dataPath) {
    return this.frontmatter(_Metadata.BuildDataFileFullPath(dataPath));
  }
  get(file = null, sources = _Metadata.DefaultSources) {
    var _a;
    if (file instanceof import_obsidian2.TFolder) {
      return file.children.map((c) => this.get(c, sources)).flat();
    }
    const fileName = file ? (_a = _Metadata.ParseFilePathFromSource(file)) != null ? _a : this.current.path : this.Current.Path;
    if (fileName == null ? void 0 : fileName.endsWith("/")) {
      const folderName = fileName.substring(0, -1);
      const fileObject = this.vault(folderName);
      if (fileObject instanceof import_obsidian2.TFolder) {
        return fileObject.children.map((c) => this.get(c, sources)).flat();
      } else {
        throw "Expected folder because of trailing slash(/): '" + fileName + "'.";
      }
    } else {
      const fileObject = this.vault(fileName);
      if (fileObject instanceof import_obsidian2.TFolder) {
        return fileObject.children.map((c) => this.get(c, sources)).flat();
      }
    }
    let values = {};
    if (sources === true) {
      values = this._kebabPropSplayer(_Metadata.DataviewApi.page(fileName), ["file"]) || {};
    } else {
      if (sources === false) {
        return {};
      }
      if (sources.DataviewInline || sources.FileInfo) {
        values = this._kebabPropSplayer(_Metadata.DataviewApi.page(fileName), ["file"]) || {};
        if (!sources.FileInfo) {
          delete values.file;
        } else {
          values["File"] = values.file;
        }
        let frontmatter = null;
        if (!sources.DataviewInline) {
          frontmatter = this.frontmatter(fileName);
          Object.keys(values).forEach((prop) => {
            if (!frontmatter.hasOwnProperty(prop) && prop != "file") {
              delete values[prop];
            }
          });
        }
        if (!sources.Frontmatter) {
          frontmatter = frontmatter || this.frontmatter(fileName);
          Object.keys(frontmatter).forEach((prop) => {
            delete values[prop];
          });
        }
      } else if (sources.Frontmatter) {
        values = this.frontmatter(fileName);
      }
    }
    if (sources === true || sources.Cache) {
      values["cache"] = this.cache(fileName);
      values["Cache"] = this.cache(fileName);
    }
    if (sources === true || sources.Sections) {
      if (sources === true || sources.FileInfo) {
        values.file.sections = this.sections(fileName);
        values.file.Sections = this.sections(fileName);
      } else {
        values.file = {};
        values.file.sections = this.sections(fileName);
        values.file.Sections = this.sections(fileName);
      }
    }
    return values;
  }
  patch(file, frontmatterData, propertyName = null, options = { toValuesFile: false, prototype: false }) {
    var _a, _b;
    if (options.prototype && options.toValuesFile) {
      this.patch(file, frontmatterData, propertyName, { ...options, prototype: false });
      this.patch(file, frontmatterData, propertyName, { ...options, toValuesFile: false });
      return;
    }
    const { update } = _Metadata.MetaeditApi;
    const fileName = _Metadata._parseFileNameFromDataFileFileOrPrototype((_a = options.toValuesFile) != null ? _a : false, file, (_b = options.prototype) != null ? _b : false);
    if (propertyName != null) {
      update(propertyName, frontmatterData, fileName);
    } else {
      Object.keys(frontmatterData).forEach((propertyName2) => update(propertyName2, frontmatterData[propertyName2], fileName));
    }
  }
  set(file, frontmatterData, options = { toValuesFile: false, prototype: false }) {
    var _a, _b;
    if (options.prototype && options.toValuesFile) {
      this.set(file, frontmatterData, { ...options, prototype: false });
      this.set(file, frontmatterData, { ...options, toValuesFile: false });
      return;
    }
    const { update } = _Metadata.MetaeditApi;
    const fileName = _Metadata._parseFileNameFromDataFileFileOrPrototype((_a = options.toValuesFile) != null ? _a : false, file, (_b = options.prototype) != null ? _b : false);
    this.clear(fileName);
    Object.keys(frontmatterData).forEach((propertyName) => update(propertyName, frontmatterData[propertyName], fileName));
  }
  clear(file = null, frontmatterProperties = null, options = { toValuesFile: false, prototype: false }) {
    var _a, _b;
    if (options.prototype && options.toValuesFile) {
      this.set(file, frontmatterProperties, { ...options, prototype: false });
      this.set(file, frontmatterProperties, { ...options, toValuesFile: false });
      return;
    }
    const fileName = _Metadata._parseFileNameFromDataFileFileOrPrototype((_a = options.toValuesFile) != null ? _a : false, file, (_b = options.prototype) != null ? _b : false);
    let propsToClear = [];
    if (typeof frontmatterProperties === "string") {
      propsToClear.push(frontmatterProperties);
    } else if (typeof frontmatterProperties === "object") {
      if (frontmatterProperties === null) {
        propsToClear = Object.keys(this.frontmatter(fileName));
      } else if (Array.isArray(frontmatterProperties)) {
        propsToClear = frontmatterProperties;
      } else {
        propsToClear = Object.keys(frontmatterProperties);
      }
    }
    throw "not implemented";
  }
  static ContainsDeepProperty(propertyPath, onObject) {
    const keys = typeof propertyPath == "string" ? propertyPath.split(".") : propertyPath;
    let parent = onObject;
    for (const currentKey of keys) {
      if (typeof parent !== "object") {
        return false;
      }
      if (!parent.hasOwnProperty(currentKey)) {
        return false;
      }
      parent = parent[currentKey];
    }
    return true;
  }
  static TryToGetDeepProperty(propertyPath, thenDo, fromObject) {
    const keys = typeof propertyPath == "string" ? propertyPath.split(".") : propertyPath;
    let parent = fromObject;
    for (const currentKey of keys) {
      if (typeof parent !== "object" || !parent.hasOwnProperty(currentKey)) {
        if (thenDo && thenDo.onFalse) {
          thenDo.onFalse();
        }
        return false;
      }
      parent = parent[currentKey];
    }
    if (thenDo) {
      const then = thenDo.onTrue || thenDo;
      if (then) {
        return then(parent);
      }
    }
    return true;
  }
  static GetDeepProperty(propertyPath, fromObject) {
    return (typeof propertyPath == "string" ? propertyPath.split(".") : propertyPath).reduce((t, p) => t == null ? void 0 : t[p], fromObject);
  }
  static SetDeepProperty(propertyPath, value, onObject) {
    const keys = typeof propertyPath == "string" ? propertyPath.split(".") : propertyPath;
    let parent = onObject;
    let currentKey;
    for (currentKey of keys) {
      if (typeof parent !== "object") {
        throw `Property: ${currentKey}, in Path: ${propertyPath}, is not an object. Child property values cannot be set!`;
      }
      if (!parent.hasOwnProperty(currentKey)) {
        parent[currentKey] = {};
      }
      if (currentKey != keys[keys.length - 1]) {
        parent = parent[currentKey];
      }
    }
    if (!currentKey) {
      throw "No Final Key Provided!?";
    }
    if (typeof value === "function") {
      parent[currentKey] = value(parent[currentKey]);
    } else {
      parent[currentKey] = value;
    }
  }
  path(relativePath = null, extension = "", rootFolder = null) {
    return _Metadata._addExtension(_Metadata._findPath(relativePath, extension, rootFolder), extension);
  }
  static Path(relativePath = null, extension = "", rootFolder = null) {
    return _Metadata.Api.path(relativePath, extension, rootFolder);
  }
  static ParseFilePathFromSource(file) {
    let fileName = file || null;
    if (typeof file === "object" && file !== null) {
      fileName = file.path;
    }
    return fileName;
  }
  static BuildDataFileFullPath(dataPath) {
    return app.plugins.plugins["metadata-api"].settings.dataFilesPath + dataPath;
  }
  static BuildPrototypeFileFullPath(prototypePath) {
    return app.plugins.plugins["metadata-api"].settings.prototypesPath + prototypePath;
  }
  static _parseFileNameFromDataFileFileOrPrototype(toValuesFile, file, prototype) {
    return toValuesFile ? file ? _Metadata.BuildDataFileFullPath(_Metadata.ParseFilePathFromSource(file)) : typeof toValuesFile === "string" ? _Metadata.BuildDataFileFullPath(toValuesFile) : _Metadata.BuildDataFileFullPath(_Metadata.Api.Current.Path) : prototype ? file ? _Metadata.BuildPrototypeFileFullPath(_Metadata.ParseFilePathFromSource(file)) : typeof prototype === "string" ? _Metadata.BuildPrototypeFileFullPath(prototype) : _Metadata.BuildPrototypeFileFullPath(_Metadata.Api.Current.Path) : _Metadata.ParseFilePathFromSource(file) || _Metadata.Api.Current.Path;
  }
  static _findPath(relativePath = null, extension = "", rootFolder = null) {
    if (!relativePath) {
      return _Metadata.Api.current.path;
    }
    let currentFolder = rootFolder ? app.vault.getAbstractFileByPath(rootFolder) : _Metadata.Api.Current.Note.parent;
    if (!currentFolder) {
      throw `Root Folder Not Found: ${currentFolder}.`;
    }
    if (relativePath.startsWith("?")) {
      const foundFile = app.metadataCache.getFirstLinkpathDest(_Metadata._addExtension(relativePath.substring(1), extension), currentFolder.path);
      if (foundFile) {
        return foundFile.path.substring(0, foundFile.path.length - foundFile.extension.length - 1);
      }
    }
    const [fileName, ...folders] = relativePath.split("/").reverse();
    let absolutePath = fileName;
    if (folders && folders.length) {
      for (var folder of folders.reverse()) {
        if (folder === "..") {
          currentFolder = currentFolder.parent;
        } else if (folder === ".") {
          continue;
        } else {
          absolutePath = folder + (absolutePath ? "/" + absolutePath : "");
        }
      }
    } else {
      const foundFile = app.metadataCache.getFirstLinkpathDest(_Metadata._addExtension(relativePath, extension), currentFolder.path);
      if (foundFile) {
        return foundFile.path.substring(0, foundFile.path.length - foundFile.extension.length - 1);
      }
    }
    if (currentFolder.path !== "/") {
      return currentFolder.path + (absolutePath ? "/" + absolutePath : "");
    } else {
      return absolutePath;
    }
  }
  static _addExtension(path, extension) {
    if (extension) {
      if (typeof extension !== "string") {
        return path + ".md";
      } else {
        return path + "." + extension;
      }
    } else {
      return path;
    }
  }
};
var Metadata = _Metadata;
Metadata._caches = {};

// src/settings.ts
var import_obsidian3 = require("obsidian");
var DefaultSettings = {
  globalCacheName: "cache",
  globalMetadataApiName: "meta",
  globalPathName: "path",
  defineObjectPropertyHelperFunctions: true,
  defineArrayHelperFunctions: true,
  splayKebabCaseProperties: 3 /* LowerAndCamelCase */,
  splayFrontmatterWithoutDataview: true,
  prototypesPath: "_/_assets/_data/_prototypes",
  valuesPath: "_/_assets/_data/_values"
};
var MetadataApiSettingTab = class extends import_obsidian3.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Medatata Api Settings" });
    new import_obsidian3.Setting(containerEl).setName("Metadata Api Variable Name").setDesc("The variable name to use for the Metadata Api global scope variable registered by this plugin").addText((text) => text.setPlaceholder("meta").setValue(this.plugin.settings.globalMetadataApiName).onChange(async (value) => {
      this.plugin.settings.globalMetadataApiName = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("Global Cache Variable Name").setDesc("The variable name to use for the cache global scope variable registered by this plugin").addText((text) => text.setPlaceholder("cache").setValue(this.plugin.settings.globalCacheName).onChange(async (value) => {
      this.plugin.settings.globalCacheName = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("Global Path Variable Name").setDesc("The name to use for the path global helper function registered by this plugin").addText((text) => text.setPlaceholder("path").setValue(this.plugin.settings.globalPathName).onChange(async (value) => {
      this.plugin.settings.globalPathName = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("Add Array Helper Functions.").setDesc("Adds the functions aggregateby, indexBy, etc to all arrays for data management.").addToggle((toggle) => toggle.setValue(this.plugin.settings.defineArrayHelperFunctions).onChange(async (value) => {
      this.plugin.settings.defineArrayHelperFunctions = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("Add Object Property Helper Functions.").setDesc("Adds the function hasProp, getProp, and setProp to all objects for deep property access.").addToggle((toggle) => toggle.setValue(this.plugin.settings.defineObjectPropertyHelperFunctions).onChange(async (value) => {
      this.plugin.settings.defineObjectPropertyHelperFunctions = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("Splay Kebab-Case Properties.").setDesc("This option adds copies of any kebab-case properties with the desired naming schemes. This is similar to how a lowercase version of values with uppercase letters are provided in dataview.").addDropdown((toggle) => toggle.setValue(this.plugin.settings.splayKebabCaseProperties.toString()).addOptions(Object.fromEntries(Object.entries(SplayKebabCasePropertiesOption).map(([key, value]) => [key.toString(), value.toString()]))).onChange(async (value) => {
      this.plugin.settings.splayKebabCaseProperties = SplayKebabCasePropertiesOption[parseInt(value)];
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("Splay Frontmatter Properties to Lower Case even without Dataview.").setDesc("Dataview splays property keys with uppercase values to lowercase, creating two keys. If this is true, Metadata Api will add this functionality to the base Frontmatter calls, even without Dataview sources included.").addToggle((toggle) => toggle.setValue(this.plugin.settings.splayFrontmatterWithoutDataview).onChange(async (value) => {
      this.plugin.settings.splayFrontmatterWithoutDataview = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("Prototypes File Path").setDesc("The path to prototype data storage").addText((text) => text.setPlaceholder("_/_assets/_data/_prototypes").setValue(this.plugin.settings.prototypesPath).onChange(async (value) => {
      this.plugin.settings.prototypesPath = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("Data Storage Values Path").setDesc("The path to the value data storage").addText((text) => text.setPlaceholder("_/_assets/_data/_values").setValue(this.plugin.settings.valuesPath).onChange(async (value) => {
      this.plugin.settings.valuesPath = value;
      await this.plugin.saveSettings();
    }));
  }
};

// src/components/sections.tsx
var ReactSectionComponents;
((ReactSectionComponents2) => {
  let SectionRenderMode;
  ((SectionRenderMode2) => {
    SectionRenderMode2["md"] = "md";
    SectionRenderMode2["html"] = "html";
    SectionRenderMode2["txt"] = "txt";
  })(SectionRenderMode = ReactSectionComponents2.SectionRenderMode || (ReactSectionComponents2.SectionRenderMode = {}));
  ReactSectionComponents2.SectionRenderModes = [
    "md" /* md */,
    "txt" /* txt */,
    "html" /* html */
  ];
  ReactSectionComponents2.Section = ({
    data,
    mode = "md" /* md */,
    renderer = void 0,
    enabled = true
  }) => {
    const { React, Markdown } = app.plugins.plugins["obsidian-react-components"];
    const { useState, useEffect } = React;
    const section = data;
    if (!section) {
      throw "'data' prop of type Section is required.";
    }
    if (!ReactSectionComponents2.SectionRenderModes.includes(mode)) {
      throw `Unrecognized mode: ${mode}. Valid modes: ${ReactSectionComponents2.SectionRenderModes.join(", ")}`;
    }
    const [renderedContent, setRenderedContent] = useState(null);
    useEffect(async () => {
      const value = await section[mode];
      setRenderedContent(value);
    }, []);
    if (renderedContent !== null) {
      if (typeof enabled === "function" && enabled(section, renderedContent) || enabled) {
        if (renderer) {
          return renderer(section, renderedContent);
        } else {
          if (mode.toLowerCase() == "md" /* md */) {
            return /* @__PURE__ */ React.createElement("span", {
              className: `Section-${section.header.text.replace(" ", "-")} Section-Index-${section.header.index} Section-Level-${section.header.level}`
            }, /* @__PURE__ */ React.createElement(Markdown, {
              src: renderedContent
            }));
          } else if (mode.toLowerCase() == "html" /* html */) {
            return /* @__PURE__ */ React.createElement("span", {
              className: `Section-${section.header.text.replace(" ", "-")} Section-Index-${section.header.index} Section-Level-${section.header.level}`,
              dangerouslySetInnerHTML: {
                __html: renderedContent ? renderedContent.innerHTML : ""
              }
            });
          } else {
            return /* @__PURE__ */ React.createElement("div", {
              className: `Section-${section.header.text.replace(" ", "-")} Section-Index-${section.header.index} Section-Level-${section.header.level}`
            }, renderedContent);
          }
        }
      }
    }
    return /* @__PURE__ */ React.createElement("i", null, "...Loading");
  };
  ReactSectionComponents2.Sections = ({
    data,
    mode = "md" /* md */,
    renderer = void 0,
    filter = true
  }) => {
    const { React } = app.plugins.plugins["obsidian-react-components"];
    const { useState, useEffect } = React;
    if (!data) {
      throw "'data' prop of type Section[] is required.";
    }
    if (!ReactSectionComponents2.SectionRenderModes.includes(mode)) {
      throw `Unrecognized mode: ${mode}. Valid modes: ${ReactSectionComponents2.SectionRenderModes.join(", ")}`;
    }
    const [renderedSections, setRenderedSections] = useState(null);
    useEffect(async () => {
      const renderedItems = {};
      for (const section of data) {
        renderedItems[section.id] = await section[mode];
      }
      setRenderedSections(renderedItems);
    }, []);
    const sections = data.indexBy("id");
    if (renderedSections !== null) {
      const childProps = {
        mode
      };
      if (renderer) {
        childProps.renderer = (s, r) => renderer(s, r, sections, renderedSections);
      }
      if (filter) {
        childProps.enabled = typeof filter === "function" ? (s, r) => filter(s, r, sections, renderedSections) : filter;
      }
      return /* @__PURE__ */ React.createElement(React.Fragment, null, data && data.map((section) => /* @__PURE__ */ React.createElement(ReactSectionComponents2.Section, {
        data: section,
        ...childProps
      })));
    }
    return /* @__PURE__ */ React.createElement("i", null, "...Loading");
  };
  ReactSectionComponents2.Components = {
    Section: ReactSectionComponents2.Section,
    Sections: ReactSectionComponents2.Sections
  };
})(ReactSectionComponents || (ReactSectionComponents = {}));

// src/components/markdown.tsx
var ReactMarkdownComponents;
((ReactMarkdownComponents2) => {
  ReactMarkdownComponents2.InlineMd = ({ src, maxDepth = 10 }) => {
    const plugin = app.plugins.plugins["obsidian-react-components"];
    const { Markdown, React } = plugin;
    const { useRef, useEffect, useState } = React;
    const containerRef = useRef(null);
    const [initialized, setInitialized] = useState(false);
    useEffect(() => {
      var _a, _b, _c;
      if (!initialized) {
        if (containerRef.current) {
          const currentItemContents = (_c = (_b = (_a = containerRef.current.children[0]) == null ? void 0 : _a.children[0]) == null ? void 0 : _b.innerHTML) != null ? _c : "";
          containerRef.current.children[0].innerHTML = currentItemContents;
          setInitialized(true);
        }
      }
    }, []);
    return /* @__PURE__ */ React.createElement("span", {
      ref: containerRef
    }, /* @__PURE__ */ React.createElement(Markdown, {
      src,
      maxDepth
    }));
  };
  ReactMarkdownComponents2.Components = {
    InlineMd: ReactMarkdownComponents2.InlineMd
  };
})(ReactMarkdownComponents || (ReactMarkdownComponents = {}));

// src/main.ts
var MetadataApiPlugin = class extends import_obsidian4.Plugin {
  static get Instance() {
    return MetadataApiPlugin._instance;
  }
  get api() {
    return MetadataApiPlugin._instance;
  }
  async onload() {
    super.onload();
    await this.loadSettings();
    this.addSettingTab(new MetadataApiSettingTab(this.app, this));
    this._initApi();
  }
  onunload() {
    this._deinitApi();
  }
  async loadSettings() {
    this.settings = Object.assign({}, DefaultSettings, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    this._deinitApi();
    this._initApi();
  }
  _initApi() {
    this._verifyDependencies();
    MetadataApiPlugin._instance = new Metadata(this);
    PluginContainer.Instance = this;
    this._initGlobalMetadata();
    this._initGlobalCache();
    this._initGlobalPath();
    if (this.settings.defineObjectPropertyHelperFunctions) {
      this._initObjectPropertyHelperMethods();
    }
    if (this.settings.defineArrayHelperFunctions) {
      this._initArrayHelperMethods();
    }
  }
  _verifyDependencies() {
    if (!app.plugins.plugins.dataview || !app.plugins.plugins.metaedit) {
      const error = `Cannot initialize plugin: Metadata-Api. Dependency plugin is missing: ${!app.plugins.plugins.dataview ? "Dataview" : "Metaedit"}. (The metadata-api plugin has been automatically disabled.)`;
      app.plugins.disablePlugin("metadata-api");
      alert(error);
      throw error;
    }
  }
  _initObjectPropertyHelperMethods() {
    Object.defineProperty(Object.prototype, "hasProp", {
      value: function(path, thenDo) {
        if (thenDo) {
          return Metadata.TryToGetDeepProperty(path, thenDo, this);
        } else {
          return Metadata.ContainsDeepProperty(path, this);
        }
      },
      enumerable: false
    });
    Object.defineProperty(Object.prototype, "getProp", {
      value: function(path, defaultValue) {
        const value = Metadata.GetDeepProperty(path, this);
        if (defaultValue !== void 0 && value === void 0) {
          if (typeof defaultValue === "function") {
            return defaultValue();
          } else {
            return defaultValue;
          }
        }
        return value;
      },
      enumerable: false
    });
    Object.defineProperty(Object.prototype, "setProp", {
      value: function(propertyPath, value) {
        return Metadata.SetDeepProperty(propertyPath, value, this);
      },
      enumerable: false
    });
  }
  _initArrayHelperMethods() {
    Object.defineProperty(Array.prototype, "indexBy", {
      value: function(uniqueKeyPropertyPath) {
        const result = {};
        for (const i of this) {
          const key = i.getProp(uniqueKeyPropertyPath, void 0);
          if (key === void 0) {
            throw `Aggregation Key not found at path: ${uniqueKeyPropertyPath}.`;
          }
          if (result[key]) {
            throw `Key already exists in aggregate object, can't index another object by it: ${uniqueKeyPropertyPath}.`;
          } else {
            result[key] = i;
          }
        }
        return result;
      },
      enumerable: false
    });
    Object.defineProperty(Array.prototype, "aggregateBy", {
      value: function(key) {
        const result = {};
        for (const i of this) {
          const k = i ? i.getProp(key, "") : "";
          if (result[k]) {
            result[k].push(i);
          } else {
            result[k] = [i];
          }
        }
        return result;
      },
      enumerable: false
    });
  }
  _initGlobalMetadata() {
    const apiAndPlugin = {
      Api: this.api,
      Plugin: MetadataApiPlugin.Instance.plugin
    };
    const staticApi = app.plugins.plugins["obsidian-react-components"] ? {
      ...ReactSectionComponents,
      ...ReactMarkdownComponents,
      Components: {
        ...ReactSectionComponents.Components,
        ...ReactMarkdownComponents.Components
      },
      SectionComponents: ReactSectionComponents.Components,
      MarkdownComponents: ReactMarkdownComponents.Components,
      ...apiAndPlugin
    } : apiAndPlugin;
    try {
      Object.defineProperty(global, "Metadata", {
        get() {
          return staticApi;
        }
      });
    } catch (e) {
    }
    try {
      Object.defineProperty(window, "Metadata", {
        get() {
          return staticApi;
        }
      });
    } catch (e) {
    }
    try {
      Object.defineProperty(global, this.settings.globalMetadataApiName, {
        get() {
          return Metadata.Api;
        }
      });
    } catch (e) {
    }
    try {
      Object.defineProperty(window, this.settings.globalMetadataApiName, {
        get() {
          return Metadata.Api;
        }
      });
    } catch (e) {
    }
  }
  _initGlobalCache() {
    try {
      Object.defineProperty(global, this.settings.globalCacheName, {
        get() {
          return Metadata.Api.Current.Cache;
        }
      });
    } catch (e) {
    }
    try {
      Object.defineProperty(window, this.settings.globalCacheName, {
        get() {
          return Metadata.Api.Current.Cache;
        }
      });
    } catch (e) {
    }
  }
  _initGlobalPath() {
    try {
      Object.defineProperty(global, this.settings.globalPathName, {
        value: Metadata.Api.path
      });
    } catch (e) {
    }
    try {
      Object.defineProperty(window, this.settings.globalPathName, {
        value: Metadata.Api.path
      });
    } catch (e) {
    }
  }
  _deinitApi() {
    this._deinitGlobalMetadata();
    this._deinitGlobalCache();
    this._deinitGlobalPath();
    this._deinitObjectPropertyHelpers();
    this._deinitArrayHelpers();
    MetadataApiPlugin._instance = void 0;
  }
  _deinitGlobalCache() {
    try {
      delete global[this.settings.globalCacheName];
    } catch (e) {
    }
    try {
      delete window[this.settings.globalCacheName];
    } catch (e) {
    }
  }
  _deinitGlobalPath() {
    try {
      delete global[this.settings.globalPathName];
    } catch (e) {
    }
    try {
      delete window[this.settings.globalPathName];
    } catch (e) {
    }
  }
  _deinitGlobalMetadata() {
    try {
      delete global["Metadata"];
    } catch (e) {
    }
    try {
      delete window["Metadata"];
    } catch (e) {
    }
    try {
      delete global[this.settings.globalMetadataApiName];
    } catch (e) {
    }
    try {
      delete window[this.settings.globalMetadataApiName];
    } catch (e) {
    }
  }
  _deinitObjectPropertyHelpers() {
    try {
      delete Object.prototype["hasProp"];
    } catch (e) {
    }
    try {
      delete Object.prototype["getProp"];
    } catch (e) {
    }
    try {
      delete Object.prototype["setProp"];
    } catch (e) {
    }
  }
  _deinitArrayHelpers() {
    try {
      delete Array.prototype["aggregateBy"];
    } catch (e) {
    }
    try {
      delete Array.prototype["indexBy"];
    } catch (e) {
    }
  }
};
//# sourceMappingURL=data:application/json;base64,
